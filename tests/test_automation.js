function isCloseEqual(x, y) {
    return Math.abs(x - y) < 1e-9;
}

function testSegment(type, params, valueType, arr, expected) {
    let seg;

    if (Array.isArray(params)) {
        seg = new type(...params);
    } else {
        switch (type) {
            case ConstantAutomationSegment:
                seg = new type(params.x1, params.y1, params.c);
                break;
            case LinearAutomationSegment:
                seg = new type(params.x1, params.y1, params.x2, params.y2);
                break;
            case ExponentialAutomationSegment:
            case QuadraticAutomationSegment:
                seg = new type(params.x1, params.y1, params.x2, params.y2, params.yc);
        }
    }

    let array = new Float64Array(arr);

    let timeStart, timeEnd;
    try {
        timeStart = performance.now();
        seg[valueType](array);
        timeEnd = performance.now();
    } catch (e) {
        if (expected === "error") {
            return {ok: true, comment: "Correctly errored.", time: performance.now() - timeStart};
        } else {
            return {ok: false, comment: "Incorrectly errored.", time: performance.now() - timeStart};
        }
    }

    if (expected === "error") {
        return {ok: false, comment: "Incorrectly did not error.", time: timeEnd - timeStart};
    }

    let tot_deviation = 0;

    for (let i = 0; i < array.length; i++) {
        let dev = Math.abs(array[i] - expected[i]);
        tot_deviation += dev;

        if (dev > 1e-9) {
            return {ok: false, comment: `Deviation of ${dev} at index ${i} between ${array[i]} and ${expected[i]} (latter is expected)`, time: timeEnd - timeStart};
        }
    }

    return {ok: true, comment: `Average deviation: ${tot_deviation / array.length}`, time: timeEnd - timeStart};
}

const TESTS = [
    [
        ExponentialAutomationSegment,
        [1, 60, 5, 120, 66],
        "getValues",
        [...Array(50).keys()].map(x => 5*x/49),
        [59.5, 59.52965710078305, 59.56283237607352, 59.59994318129518, 59.64145638207923, 59.6878942275812, 59.73984092053996, 59.797949966732425, 59.86295239628224, 59.93566596024926, 60.01700541819574, 60.10799404615004, 60.20977650974176, 60.32363326445622, 60.45099666416827, 60.59346898060566, 60.752842560432555, 60.93112237353578, 61.13055123617814, 61.353638026334245, 61.60318924616645, 61.88234432870705, 62.19461513291567, 62.54393012397237, 62.93468379460827, 63.37179194920975, 63.86075354618767, 64.40771987660806, 65.01957194937327, 65.70400705648377, 66.4696356073984, 67.32608945070047, 68.28414304578988, 69.35584900897982, 70.55468973921023, 71.89574703087774, 73.39589180756454, 75.07399636357681, 76.95117178335771, 79.05103352558622, 81.3999985130937, 84.02761746608266, 86.96694665950459, 90.25496378142202, 93.93303312398386, 98.04742595926336, 102.64990264645061, 107.79836379349206, 113.5575786649952, 120]
    ],
    [
        ExponentialAutomationSegment,
        [1, 120, 5, 60, 67],
        "getValues",
        [...Array(50).keys()].map(x => 5*x/49),
        [226.96323303876198, 210.47461780258382, 195.60402875013148, 182.19268913188887, 170.0974029450796, 159.18902599652915, 149.35108699997718, 140.47854398497452, 132.47666273925185, 125.2600053094283, 118.75151776004527, 112.88170745071629, 107.58790104698875, 102.81357534252655, 98.50775374764568, 94.6244620003704, 91.12223728850944, 87.96368554153455, 85.11508216536308, 82.54601195699716, 80.22904435430337, 78.13944055349985, 76.25488936717511, 74.5552690025336, 73.02243221631836, 71.64001255245992, 70.39324959360559, 69.26883136069885, 68.25475217787258, 67.34018448504602, 66.51536322953922, 65.77148160232667, 65.10059700568235, 64.49554624821008, 63.949869061777626, 63.45773912372613, 63.01390184786348, 62.613618280021356, 62.25261449913567, 61.92703598359401, 61.63340645560886, 61.36859076418852, 61.129761410398245, 60.914368357494354, 60.720111803586846, 60.54491762611791, 60.38691523597135, 60.244417604756116, 60.11590325201047, 60]
    ],
    [
        ExponentialAutomationSegment,
        [1.99, 397, 3.94, -148, 103],
        "getValues",
        [...Array(50).keys()].map(x => x/10),
        [1162.6772780945194, 1118.0217960269692, 1074.0847014514766, 1030.8544374311348, 988.319632949301, 946.4690999186327, 905.2918302382437, 864.7769928982048, 824.9139311306199, 785.6921596065404, 747.1013616779668, 709.1313866642248, 671.7722471819933, 635.0141165182862, 598.8473260456952, 563.2623626792151, 528.2498663739826, 493.80062766326716, 459.9055852360723, 426.55582355370524, 393.7425705046897, 361.4571950974034, 329.6912051898387, 298.43624525588166, 267.6840941875265, 237.4266631324485, 207.6559933663623, 178.364254199609, 149.5437409174217, 121.18687275332456, 93.28619089513671, 65.83435652305315, 38.82414887928684, 12.24846336876709, -13.899690309608957, -39.62719000166106, -64.94080290703118, -89.847187359185, -114.35289457677834, -138.46437038684826, -162.18795692028266, -185.52989428001501, -208.49632218238116, -231.093281572072, -253.32671621110592, -275.2024742422376, -296.726309727218, -317.90388416030544, -338.7407679574294, -359.24244192139906]
    ],
    [
        ExponentialAutomationSegment,
        [1.99, 397, 3.94, -148, 103],
        "getDerivatives",
        [...Array(50).keys()].map(x => x/10),
        [-450.18575212269593, -442.943465208448, -435.81768735629504, -428.8065442464659, -421.9081917119911, -415.12081525362436, -408.44262956256796, -401.87187805087694, -395.4068323894166, -389.0457920532542, -382.7870838743633, -376.62906160152414, -370.57010546730424, -364.60862176200504, -358.74304241446225, -352.9718245795903, -347.29345023256246, -341.70642576951866, -336.20928161469755, -330.8005718338887, -325.4788737541029, -320.2427875893612, -315.09093607250423, -310.02196409292446, -305.0345383401261, -300.1273469530201, -295.2990991748599, -290.5485250137292, -285.8743749084912, -281.27541940011184, -276.75044880827085, -272.2982729131748, -267.91772064248914, -263.60763976330713, -259.3668965790731, -255.19437563138274, -251.08897940657928, -247.04962804707088, -243.07525906729148, -239.16482707423128, -235.31730349246322, -231.5316762935929, -227.80694973006106, -224.14214407322837, -220.53629535567367, -216.98845511763838, -213.4976901575491, -210.06308228655465, -206.68372808701113, -203.35873867485273]
    ],
        [
        ExponentialAutomationSegment,
            [-7.57, -423, -0.4, -1170, -1169.9999],
            "getDerivatives",
            [...Array(50).keys()].map(x => x/10 - 9),
            [-1819168.6754451746, -1169899.476944467, -752357.2743027841, -483837.6966153471, -311153.92202858406, -200101.73632820486, -128684.55785649428, -82756.48045132573, -53220.333276724836, -34225.76526501269, -22010.441044871208, -14154.819073833543, -9102.90269079583, -5854.037198629949, -3764.705906127508, -2421.06602311109, -1556.9770479873503, -1001.285179676474, -643.9221517977687, -414.10354012214634, -266.30818875066524, -171.2616399626551, -110.13761709805749, -70.82902337431477, -45.5498374156098, -29.292902679509343, -18.83813853300708, -12.114725101551747, -7.7909271146410175, -5.010311401772844, -3.2221095093496754, -2.072124636119035, -1.3325743570019237, -0.8569727833867069, -0.5511154763009568, -0.3544199700463247, -0.22792594396140958, -0.14657818498181507, -0.09426379436735344, -0.06062063689513582, -0.03898486839231929, -0.02507099960357568, -0.01612305099499387, -0.010368664093875966, -0.006668042861429491, -0.0042881894137280305, -0.002757715994055122, -0.0017734751826775812, -0.0011405141901318027, -0.0007334597239348435]
        ]

];

function runTests() {
    console.log("Running tests...");

    let failed = 0;

    for (let i = 0; i < TESTS.length; i++) {
        let res = testSegment(...TESTS[i]);

        if (res.ok) {
            console.log(`Test ${i + 1}: OK, time: ${res.time}`);
        } else {
            failed += 1;
            console.log(`Test ${i + 1}: FAILED, comment: ${res.comment}`);
        }
    }

    if (failed) {
        console.log(`Failed ${failed} tests.`);
    } else {
        console.log(`Passed all ${TESTS.length} tests!`);
    }


    let automation = new Automation();

//let arr = new Float32Array([...Array(1e7).keys()].map(x => 10 * x / 1e7));
    let arr = new Float32Array([...Array(50).keys()].map(x => x / 3));

    automation.addSegment(new ConstantAutomationSegment(0, 4, 60));
    automation.addSegment(new ExponentialAutomationSegment(0, 60, 2, 80, 70));
    automation.addSegment(new ExponentialAutomationSegment(0, 60, 2, 80, 64));
    automation.addSegment(new LinearAutomationSegment(0, 80, 4, 40));

    function test() {
        automation.getTimeIntegrals(arr);
    }
}

document.addEventListener("keypress", runTests);